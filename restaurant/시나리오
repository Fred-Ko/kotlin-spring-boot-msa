**범례:**
*   **Command API**: 특정 비즈니스 로직을 수행하여 상태를 변경하는 API (주로 `POST`, `PUT`, `PATCH`, `DELETE`)
*   **Query API**: 데이터를 조회하는 API (주로 `GET`)
*   **발행 이벤트**: 해당 도메인이 비즈니스 로직 수행 후 외부에 알리는 이벤트
*   **구독 이벤트**: 해당 도메인이 다른 도메인에서 발행한 이벤트를 받아 자신의 로직을 수행하는 이벤트

---

#### **1. User 도메인**

*   **책임**: 사용자 계정, 프로필, 주소 관리 및 인증
*   **주요 엔티티**: `User`, `Address`

**API 목록:**

*   **Command API**:
    *   `POST /api/v1/users/register`: 사용자 회원가입
    *   `POST /api/v1/users/login`: 사용자 로그인
    *   `PUT /api/v1/users/{userId}/profile`: 사용자 프로필 수정
    *   `PATCH /api/v1/users/{userId}/password`: 사용자 비밀번호 변경
    *   `DELETE /api/v1/users/{userId}`: 사용자 계정 삭제
    *   `POST /api/v1/users/{userId}/addresses`: 사용자 주소 등록
    *   `PUT /api/v1/users/{userId}/addresses/{addressId}`: 사용자 주소 수정
    *   `DELETE /api/v1/users/{userId}/addresses/{addressId}`: 사용자 주소 삭제
*   **Query API**:
    *   `GET /api/v1/users/{userId}/profile`: 사용자 프로필 조회
    *   `GET /api/v1/users/{userId}/addresses`: 사용자 주소 목록 조회
    *   `GET /api/v1/users/{userId}/addresses/{addressId}`: 특정 주소 상세 조회

**이벤트 목록:**

*   **발행 이벤트 (Published Events)**:
    *   `UserRegisteredEvent`: 사용자 회원가입 시 발생. (포함 정보: `userId`, `email`, `registeredAt`)
    *   `UserProfileUpdatedEvent`: 사용자 프로필 수정 시 발생. (포함 정보: `userId`, 변경된 프로필 필드)
    *   `UserAddressRegisteredEvent`: 사용자 주소 등록 시 발생. (포함 정보: `userId`, `addressId`, 주소 요약)
    *   `UserAddressUpdatedEvent`: 사용자 주소 수정 시 발생. (포함 정보: `userId`, `addressId`, 변경된 주소 필드)
    *   `UserAddressDeletedEvent`: 사용자 주소 삭제 시 발생. (포함 정보: `userId`, `addressId`)
    *   `UserDeletedEvent`: 사용자 계정 삭제 시 발생. (포함 정보: `userId`)
*   **구독 이벤트 (Subscribed Events)**:
    *   (현재 시나리오 상 `User` 도메인이 직접 구독하는 이벤트는 없음. 주로 다른 도메인이 `User` 도메인의 Query API를 호출하여 정보를 얻음)

---

#### **2. Account 도메인**

*   **책임**: 사용자의 계좌 정보 관리.
*   **주요 엔티티**: `Account`

**API 목록:**

*   **Command API**: (없음 - 계좌 생성/삭제는 이벤트 기반, 잔액 변경은 Payment 도메인에서 요청)
*   **Query API**:
    *   `GET /api/v1/accounts/by-user/{userId}`: 특정 사용자 계좌 정보 조회

**이벤트 목록:**

*   **발행 이벤트 (Published Events)**:
    *   (현재 시나리오 상 `Account` 도메인이 직접 발행하는 이벤트는 없음. 주로 Payment 도메인이 계좌 차감/입금을 요청)
*   **구독 이벤트 (Subscribed Events)**:
    *   `UserRegisteredEvent`: 사용자 회원가입 시 계좌 자동 생성.
    *   `UserDeletedEvent`: 사용자 계정 삭제 시 계좌 자동 삭제.
    *   `PaymentApprovedEvent`: 결제 승인 시 계좌 잔액 차감 (간접적으로 Payment 도메인 로직 내에서 Account 도메인 Command/Internal API 호출로 구현될 수 있음)
    *   `PaymentRefundedEvent`: 환불 시 계좌 잔액 복구 (간접적으로 Payment 도메인 로직 내에서 Account 도메인 Command/Internal API 호출로 구현될 수 있음)

---

#### **3. Restaurant 도메인 (Menu 통합)**

*   **책임**: 음식점 정보, 메뉴 관리, 영업 상태 관리, 주문 접수 및 처리 (음식점 측면).
*   **주요 엔티티**: `Restaurant`, `Menu`, `MenuItemOption`

**API 목록:**

*   **Command API (점주/관리자용)**:
    *   `POST /api/v1/restaurants`: 새로운 음식점 등록
    *   `PUT /api/v1/restaurants/{restaurantId}`: 음식점 정보 수정
    *   `DELETE /api/v1/restaurants/{restaurantId}`: 음식점 삭제
    *   `PATCH /api/v1/restaurants/{restaurantId}/status`: 음식점 영업 상태 변경 (OPEN/CLOSED 등)
    *   `POST /api/v1/restaurants/{restaurantId}/menus`: 메뉴 등록
    *   `PUT /api/v1/restaurants/{restaurantId}/menus/{menuId}`: 메뉴 정보 수정
    *   `PATCH /api/v1/restaurants/{restaurantId}/menus/{menuId}/status`: 메뉴 품절/판매 중 상태 변경
    *   `DELETE /api/v1/restaurants/{restaurantId}/menus/{menuId}`: 메뉴 삭제
    *   `PATCH /api/v1/restaurants/{restaurantId}/orders/{orderId}/accept`: 주문 접수
    *   `PATCH /api/v1/restaurants/{restaurantId}/orders/{orderId}/reject`: 주문 거절
    *   `PATCH /api/v1/restaurants/{restaurantId}/orders/{orderId}/prepared`: 조리 완료 상태 변경
*   **Query API (사용자/공통)**:
    *   `GET /api/v1/restaurants`: 음식점 목록 검색 및 조회 (위치, 카테고리, 검색어 등)
    *   `GET /api/v1/restaurants/{restaurantId}`: 특정 음식점 상세 정보 및 **메뉴 목록 조회**

**이벤트 목록:**

*   **발행 이벤트 (Published Events)**:
    *   `RestaurantRegisteredEvent`: 음식점 등록 시 발생.
    *   `RestaurantInfoUpdatedEvent`: 음식점 정보 수정 시 발생.
    *   `RestaurantStatusChangedEvent`: 음식점 영업 상태 변경 시 발생.
    *   `MenuRegisteredEvent`: 메뉴 등록 시 발생.
    *   `MenuUpdatedEvent`: 메뉴 정보 수정 시 발생.
    *   `MenuAvailabilityChangedEvent`: 메뉴 품절/판매 중 상태 변경 시 발생.
    *   `OrderAcceptedEvent`: 음식점이 주문을 접수했을 때 발생. (포함 정보: `orderId`, `restaurantId`, `estimatedPreparationTime`)
    *   `OrderRejectedEvent`: 음식점이 주문을 거절했을 때 발생. (포함 정보: `orderId`, `restaurantId`, `reason`)
    *   `OrderPreparedEvent`: 음식이 조리 완료되었을 때 발생. (포함 정보: `orderId`, `restaurantId`)
*   **구독 이벤트 (Subscribed Events)**:
    *   `OrderPaidEvent`: 새로운 주문이 결제 완료되었을 때 음식점에 알림.

---

#### **4. Order 도메인**

*   **책임**: 사용자의 음식 주문 생성, 관리, 상태 추적 및 주문 내역 조회.
*   **주요 엔티티**: `Order`, `OrderItem`

**API 목록:**

*   **Command API**:
    *   `POST /api/v1/orders`: 새로운 주문 생성
    *   `POST /api/v1/orders/{orderId}/cancel`: 주문 취소 요청
    *   (내부 API 또는 이벤트 기반으로 상태 변경이 이루어짐)
*   **Query API**:
    *   `GET /api/v1/users/{userId}/orders`: 사용자 주문 목록 조회
    *   `GET /api/v1/restaurants/{restaurantId}/orders`: 음식점 주문 목록 조회 (점주용)
    *   `GET /api/v1/orders/{orderId}`: 특정 주문 상세 조회

**이벤트 목록:**

*   **발행 이벤트 (Published Events)**:
    *   `OrderCreatedEvent`: 주문이 생성되었을 때 발생 (결제 전). (포함 정보: `orderId`, `userId`, `restaurantId`, `finalAmount`, `paymentMethodId`, `deliveryAddress`)
    *   `OrderPaidEvent`: 주문이 성공적으로 결제되었을 때 발생. (포함 정보: `orderId`, `userId`, `restaurantId`, `totalAmount`, `deliveryAddress`)
    *   `OrderCanceledEvent`: 주문이 취소되었을 때 발생. (포함 정보: `orderId`, `userId`, `restaurantId`, `finalAmount`, `cancelReason`)
*   **구독 이벤트 (Subscribed Events)**:
    *   `PaymentApprovedEvent`: 결제 도메인에서 결제 승인 시 주문 상태 업데이트.
    *   `PaymentFailedEvent`: 결제 도메인에서 결제 실패 시 주문 상태 업데이트.
    *   `PaymentRefundedEvent`: 결제 도메인에서 환불 완료 시 주문 상태 업데이트.
    *   `OrderAcceptedEvent`: Restaurant 도메인에서 주문 접수 시 주문 상태 업데이트.
    *   `OrderRejectedEvent`: Restaurant 도메인에서 주문 거절 시 주문 상태 업데이트.
    *   `DeliveryCompletedEvent`: Delivery 도메인에서 배달 완료 시 주문 상태 최종 업데이트.

---

#### **5. Payment 도메인**

*   **책임**: 주문에 대한 결제 처리, 결제 수단 관리, 결제 내역 조회 및 환불.
*   **주요 엔티티**: `Payment`, `PaymentMethod`

**API 목록:**

*   **Command API**:
    *   `POST /api/v1/payments/pay`: 주문 결제 요청
    *   `POST /api/v1/payments/{paymentId}/cancel`: 결제 취소 (환불) 요청
    *   `POST /api/v1/users/{userId}/payment-methods`: 사용자 결제 수단 등록
    *   `PUT /api/v1/users/{userId}/payment-methods/{paymentMethodId}`: 사용자 결제 수단 수정 (별칭 등)
    *   `DELETE /api/v1/users/{userId}/payment-methods/{paymentMethodId}`: 사용자 결제 수단 삭제
*   **Query API**:
    *   `GET /api/v1/users/{userId}/payments`: 사용자 결제 내역 목록 조회
    *   `GET /api/v1/payments/{paymentId}`: 특정 결제 상세 조회
    *   `GET /api/v1/users/{userId}/payment-methods`: 사용자 결제 수단 목록 조회

**이벤트 목록:**

*   **발행 이벤트 (Published Events)**:
    *   `PaymentApprovedEvent`: 결제가 성공적으로 승인되었을 때 발생. (포함 정보: `paymentId`, `orderId`, `userId`, `transactionId`, `amount`)
    *   `PaymentFailedEvent`: 결제가 실패했을 때 발생. (포함 정보: `orderId`, `userId`, `reason`)
    *   `PaymentRefundedEvent`: 결제가 성공적으로 환불되었을 때 발생. (포함 정보: `paymentId`, `orderId`, `refundAmount`)
    *   `PaymentRefundFailedEvent`: 결제 환불이 실패했을 때 발생.
    *   `PaymentMethodRegisteredEvent`: 사용자가 결제 수단을 등록했을 때 발생.
*   **구독 이벤트 (Subscribed Events)**:
    *   `OrderCreatedEvent`: Order 도메인에서 주문 생성 시 결제 프로세스 시작.
    *   `OrderCanceledEvent`: Order 도메인에서 주문 취소 시 결제 환불 프로세스 시작.

---

#### **6. Delivery 도메인**

*   **책임**: 주문된 음식의 배달 과정 관리, 배달원 할당 및 배달 상태 추적.
*   **주요 엔티티**: `Delivery`, `DeliveryPerson`

**API 목록:**

*   **Command API (관리자/배달원용)**:
    *   `POST /api/v1/delivery-persons`: 새로운 배달원 등록
    *   `PUT /api/v1/delivery-persons/{deliveryPersonId}`: 배달원 정보 수정
    *   `PATCH /api/v1/deliveries/{deliveryId}/assign`: 특정 배달에 배달원 할당
    *   `PATCH /api/v1/deliveries/{deliveryId}/status`: 배달 상태 변경 (픽업, 배달 중, 배달 완료 등)
*   **Query API (사용자/음식점/배달원용)**:
    *   `GET /api/v1/orders/{orderId}/delivery-status`: 특정 주문의 배달 상태 조회
    *   `GET /api/v1/deliveries/{deliveryId}`: 특정 배달 상세 정보 조회

**이벤트 목록:**

*   **발행 이벤트 (Published Events)**:
    *   `DeliveryRequestedEvent`: 주문 처리 후 배달이 요청되었을 때 발생. (포함 정보: `deliveryId`, `orderId`, `pickupLocation`, `deliveryLocation`)
    *   `DeliveryAssignedEvent`: 배달원이 할당되었을 때 발생. (포함 정보: `deliveryId`, `orderId`, `deliveryPersonId`)
    *   `DeliveryPickedUpEvent`: 음식이 배달원에 의해 픽업되었을 때 발생. (포함 정보: `deliveryId`, `orderId`, `pickupTime`)
    *   `DeliveryCompletedEvent`: 배달이 성공적으로 완료되었을 때 발생. (포함 정보: `deliveryId`, `orderId`, `deliveryTime`)
    *   `DeliveryCanceledEvent`: 배달이 취소되었을 때 발생. (포함 정보: `deliveryId`, `orderId`, `reason`)
*   **구독 이벤트 (Subscribed Events)**:
    *   `OrderPreparedEvent`: Restaurant 도메인에서 음식이 조리 완료되었을 때 배달 프로세스 시작.
    *   `OrderCanceledEvent`: Order 도메인에서 주문 취소 시 진행 중인 배달 취소.

---

#### **3. Restaurant 도메인 (Menu 통합)**

*   **책임**: 음식점 정보, 메뉴 관리, 영업 상태 관리, 주문 접수 및 처리 (음식점 측면).
*   **주요 엔티티**: `Restaurant`, `Menu`, `MenuItemOption`

**API 목록:**

*   **Command API (점주/관리자용)**:
    *   `POST /api/v1/restaurants`: 새로운 음식점 등록
    *   `PUT /api/v1/restaurants/{restaurantId}`: 음식점 정보 수정
    *   `DELETE /api/v1/restaurants/{restaurantId}`: 음식점 삭제
    *   `PATCH /api/v1/restaurants/{restaurantId}/status`: 음식점 영업 상태 변경 (OPEN/CLOSED 등)
    *   `POST /api/v1/restaurants/{restaurantId}/menus`: 메뉴 등록
    *   `PUT /api/v1/restaurants/{restaurantId}/menus/{menuId}`: 메뉴 정보 수정
    *   `PATCH /api/v1/restaurants/{restaurantId}/menus/{menuId}/status`: 메뉴 품절/판매 중 상태 변경
    *   `DELETE /api/v1/restaurants/{restaurantId}/menus/{menuId}`: 메뉴 삭제
    *   `PATCH /api/v1/restaurants/{restaurantId}/orders/{orderId}/accept`: 주문 접수
    *   `PATCH /api/v1/restaurants/{restaurantId}/orders/{orderId}/reject`: 주문 거절
    *   `PATCH /api/v1/restaurants/{restaurantId}/orders/{orderId}/prepared`: 조리 완료 상태 변경
*   **Query API (사용자/공통)**:
    *   `GET /api/v1/restaurants`: 음식점 목록 검색 및 조회 (위치, 카테고리, 검색어 등)
    *   `GET /api/v1/restaurants/{restaurantId}`: 특정 음식점 상세 정보 및 **메뉴 목록 조회**

**이벤트 목록:**

*   **발행 이벤트 (Published Events)**:
    *   `RestaurantRegisteredEvent`: 음식점 등록 시 발생.
    *   `RestaurantInfoUpdatedEvent`: 음식점 정보 수정 시 발생.
    *   `RestaurantStatusChangedEvent`: 음식점 영업 상태 변경 시 발생.
    *   `MenuRegisteredEvent`: 메뉴 등록 시 발생.
    *   `MenuUpdatedEvent`: 메뉴 정보 수정 시 발생.
    *   `MenuAvailabilityChangedEvent`: 메뉴 품절/판매 중 상태 변경 시 발생.
    *   `OrderAcceptedEvent`: 음식점이 주문을 접수했을 때 발생. (포함 정보: `orderId`, `restaurantId`, `estimatedPreparationTime`)
    *   `OrderRejectedEvent`: 음식점이 주문을 거절했을 때 발생. (포함 정보: `orderId`, `restaurantId`, `reason`)
    *   `OrderPreparedEvent`: 음식이 조리 완료되었을 때 발생. (포함 정보: `orderId`, `restaurantId`)
*   **구독 이벤트 (Subscribed Events)**:
    *   `OrderPaidEvent`: 새로운 주문이 결제 완료되었을 때 음식점에 알림.

---

#### **4. Order 도메인**

*   **책임**: 사용자의 음식 주문 생성, 관리, 상태 추적 및 주문 내역 조회.
*   **주요 엔티티**: `Order`, `OrderItem`

**API 목록:**

*   **Command API**:
    *   `POST /api/v1/orders`: 새로운 주문 생성
    *   `POST /api/v1/orders/{orderId}/cancel`: 주문 취소 요청
    *   (내부 API 또는 이벤트 기반으로 상태 변경이 이루어짐)
*   **Query API**:
    *   `GET /api/v1/users/{userId}/orders`: 사용자 주문 목록 조회
    *   `GET /api/v1/restaurants/{restaurantId}/orders`: 음식점 주문 목록 조회 (점주용)
    *   `GET /api/v1/orders/{orderId}`: 특정 주문 상세 조회

**이벤트 목록:**

*   **발행 이벤트 (Published Events)**:
    *   `OrderCreatedEvent`: 주문이 생성되었을 때 발생 (결제 전). (포함 정보: `orderId`, `userId`, `restaurantId`, `finalAmount`, `paymentMethodId`, `deliveryAddress`)
    *   `OrderPaidEvent`: 주문이 성공적으로 결제되었을 때 발생. (포함 정보: `orderId`, `userId`, `restaurantId`, `totalAmount`, `deliveryAddress`)
    *   `OrderCanceledEvent`: 주문이 취소되었을 때 발생. (포함 정보: `orderId`, `userId`, `restaurantId`, `finalAmount`, `cancelReason`)
*   **구독 이벤트 (Subscribed Events)**:
    *   `PaymentApprovedEvent`: 결제 도메인에서 결제 승인 시 주문 상태 업데이트.
    *   `PaymentFailedEvent`: 결제 도메인에서 결제 실패 시 주문 상태 업데이트.
    *   `PaymentRefundedEvent`: 결제 도메인에서 환불 완료 시 주문 상태 업데이트.
    *   `OrderAcceptedEvent`: Restaurant 도메인에서 주문 접수 시 주문 상태 업데이트.
    *   `OrderRejectedEvent`: Restaurant 도메인에서 주문 거절 시 주문 상태 업데이트.
    *   `DeliveryCompletedEvent`: Delivery 도메인에서 배달 완료 시 주문 상태 최종 업데이트.

---

#### **5. Payment 도메인**

*   **책임**: 주문에 대한 결제 처리, 결제 수단 관리, 결제 내역 조회 및 환불.
*   **주요 엔티티**: `Payment`, `PaymentMethod`

**API 목록:**

*   **Command API**:
    *   `POST /api/v1/payments/pay`: 주문 결제 요청
    *   `POST /api/v1/payments/{paymentId}/cancel`: 결제 취소 (환불) 요청
    *   `POST /api/v1/users/{userId}/payment-methods`: 사용자 결제 수단 등록
    *   `PUT /api/v1/users/{userId}/payment-methods/{paymentMethodId}`: 사용자 결제 수단 수정 (별칭 등)
    *   `DELETE /api/v1/users/{userId}/payment-methods/{paymentMethodId}`: 사용자 결제 수단 삭제
*   **Query API**:
    *   `GET /api/v1/users/{userId}/payments`: 사용자 결제 내역 목록 조회
    *   `GET /api/v1/payments/{paymentId}`: 특정 결제 상세 조회
    *   `GET /api/v1/users/{userId}/payment-methods`: 사용자 결제 수단 목록 조회

**이벤트 목록:**

*   **발행 이벤트 (Published Events)**:
    *   `PaymentApprovedEvent`: 결제가 성공적으로 승인되었을 때 발생. (포함 정보: `paymentId`, `orderId`, `userId`, `transactionId`, `amount`)
    *   `PaymentFailedEvent`: 결제가 실패했을 때 발생. (포함 정보: `orderId`, `userId`, `reason`)
    *   `PaymentRefundedEvent`: 결제가 성공적으로 환불되었을 때 발생. (포함 정보: `paymentId`, `orderId`, `refundAmount`)
    *   `PaymentRefundFailedEvent`: 결제 환불이 실패했을 때 발생.
    *   `PaymentMethodRegisteredEvent`: 사용자가 결제 수단을 등록했을 때 발생.
*   **구독 이벤트 (Subscribed Events)**:
    *   `OrderCreatedEvent`: Order 도메인에서 주문 생성 시 결제 프로세스 시작.
    *   `OrderCanceledEvent`: Order 도메인에서 주문 취소 시 결제 환불 프로세스 시작.

---

#### **6. Delivery 도메인**

*   **책임**: 주문된 음식의 배달 과정 관리, 배달원 할당 및 배달 상태 추적.
*   **주요 엔티티**: `Delivery`, `DeliveryPerson`

**API 목록:**

*   **Command API (관리자/배달원용)**:
    *   `POST /api/v1/delivery-persons`: 새로운 배달원 등록
    *   `PUT /api/v1/delivery-persons/{deliveryPersonId}`: 배달원 정보 수정
    *   `PATCH /api/v1/deliveries/{deliveryId}/assign`: 특정 배달에 배달원 할당
    *   `PATCH /api/v1/deliveries/{deliveryId}/status`: 배달 상태 변경 (픽업, 배달 중, 배달 완료 등)
*   **Query API (사용자/음식점/배달원용)**:
    *   `GET /api/v1/orders/{orderId}/delivery-status`: 특정 주문의 배달 상태 조회
    *   `GET /api/v1/deliveries/{deliveryId}`: 특정 배달 상세 정보 조회

**이벤트 목록:**

*   **발행 이벤트 (Published Events)**:
    *   `DeliveryRequestedEvent`: 주문 처리 후 배달이 요청되었을 때 발생. (포함 정보: `deliveryId`, `orderId`, `pickupLocation`, `deliveryLocation`)
    *   `DeliveryAssignedEvent`: 배달원이 할당되었을 때 발생. (포함 정보: `deliveryId`, `orderId`, `deliveryPersonId`)
    *   `DeliveryPickedUpEvent`: 음식이 배달원에 의해 픽업되었을 때 발생. (포함 정보: `deliveryId`, `orderId`, `pickupTime`)
    *   `DeliveryCompletedEvent`: 배달이 성공적으로 완료되었을 때 발생. (포함 정보: `deliveryId`, `orderId`, `deliveryTime`)
    *   `DeliveryCanceledEvent`: 배달이 취소되었을 때 발생. (포함 정보: `deliveryId`, `orderId`, `reason`)
*   **구독 이벤트 (Subscribed Events)**:
    *   `OrderPreparedEvent`: Restaurant 도메인에서 음식이 조리 완료되었을 때 배달 프로세스 시작.
    *   `OrderCanceledEvent`: Order 도메인에서 주문 취소 시 진행 중인 배달 취소.

---
이 리스트는 사용자 프로필 기능 제거와 Menu 도메인 통합을 반영한 최종적인 도메인별 API 및 이벤트 목록입니다.