[versions]
kotlin = "2.1.20" # build.gradle.kts 에 명시된 버전 사용
springBoot = "3.3.1" # build.gradle.kts 에 명시된 버전 사용
dependencyManagement = "1.1.6" # build.gradle.kts 에 명시된 버전 사용
ktlintGradle = "12.1.1" # build.gradle.kts 에 명시된 버전 사용
# asciidoctor = "4.0.2" # 사용하지 않으므로 제거 또는 주석 처리
testcontainers = "1.21.0"
kotest = "5.9.1"
resilience4j = "2.3.0"
slf4j = "2.0.13"
jakartaValidation = "3.1.1"
jakartaPersistence = "3.2.0"
jakartaServlet = "6.1.0"
avro = "1.11.3"
kafkaAvroSerializer = "7.6.1"
kafkaSchemaRegistryClient = "7.6.1"
kafkaClients = "3.7.0"
mockk = "1.14.0"
springdoc = "2.5.0"
logstashLogbackEncoder = "8.1"
kotlinLogging = "3.0.5"
jackson = "2.17.1"
avro4k = "1.9.0" # 추가
kotlinxSerialization = "1.7.1" # kotlinx.serialization 버전 추가 (kotlin 플러그인 버전과 맞추거나 호환되는 버전)
kotlinxDatetime = "0.6.0" # kotlinx-datetime 버전 추가
h2 = "2.2.224"
postgresql = "42.7.3"
mockitoKotlin = "5.3.1" # 추가
assertj = "3.26.3" # 추가
ktlintCli = "12.1.1" # Same as ktlintGradle plugin usually

[libraries]
# Kotlin
kotlin-stdlib = { module = "org.jetbrains.kotlin:kotlin-stdlib", version.ref = "kotlin" }
kotlin-reflect = { module = "org.jetbrains.kotlin:kotlin-reflect", version.ref = "kotlin" }
kotlinx-serialization-core = { module = "org.jetbrains.kotlinx:kotlinx-serialization-core", version.ref = "kotlinxSerialization" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinxSerialization" }
kotlinx-datetime = { module = "org.jetbrains.kotlinx:kotlinx-datetime", version.ref = "kotlinxDatetime" }

# Spring Boot
spring-boot-starter = { module = "org.springframework.boot:spring-boot-starter" }
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web" }
spring-boot-starter-data-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa" }
spring-boot-starter-hateoas = { module = "org.springframework.boot:spring-boot-starter-hateoas" }
spring-boot-starter-validation = { module = "org.springframework.boot:spring-boot-starter-validation" }
spring-boot-starter-security = { module = "org.springframework.boot:spring-boot-starter-security" }
spring-boot-starter-aop = { module = "org.springframework.boot:spring-boot-starter-aop" }
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test" } # Test starter added
spring-tx = { module = "org.springframework:spring-tx" }
spring-context = { module = "org.springframework:spring-context" }
spring-security-crypto = { module = "org.springframework.security:spring-security-crypto" } # 추가

# Resilience4j
resilience4j-spring-boot3 = { module = "io.github.resilience4j:resilience4j-spring-boot3" }

# Logging
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
kotlin-logging-jvm = { module = "io.github.microutils:kotlin-logging-jvm", version.ref = "kotlinLogging" }
logstash-logback-encoder = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logstashLogbackEncoder" }
logback-classic = { module = "ch.qos.logback:logback-classic" } # Added for transitive inclusion clarity

# Jakarta EE APIs
jakarta-validation-api = { module = "jakarta.validation:jakarta.validation-api", version.ref = "jakartaValidation" }
jakarta-persistence-api = { module = "jakarta.persistence:jakarta.persistence-api", version.ref = "jakartaPersistence" }
jakarta-servlet-api = { module = "jakarta.servlet:jakarta.servlet-api", version.ref = "jakartaServlet" }

# Jackson
jackson-module-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jackson-datatype-jsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" } # 추가

# Database
h2 = { module = "com.h2database:h2", version.ref = "h2" }
postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }

# Kafka & Avro
avro = { module = "org.apache.avro:avro", version.ref = "avro" }
avro4k-core = { module = "io.github.avro4k:avro4k-core", version.ref = "avro4k" }
kafka-clients = { module = "org.apache.kafka:kafka-clients", version.ref = "kafkaClients" }
# kafka-avro-serializer = { module = "io.confluent:kafka-avro-serializer", version.ref = "kafkaAvroSerializer" } # avro4k 사용 시 불필요할 수 있음
# kafka-schema-registry-client = { module = "io.confluent:kafka-schema-registry-client", version.ref = "kafkaSchemaRegistryClient } # 필요시 추가

# Springdoc OpenAPI
springdoc-openapi-starter-webmvc-ui = { module = "org.springdoc:springdoc-openapi-starter-webmvc-ui", version.ref = "springdoc" }

# Test Dependencies
testcontainers-bom = { module = "org.testcontainers:testcontainers-bom", version.ref = "testcontainers" }
testcontainers-postgresql = { module = "org.testcontainers:postgresql" }
testcontainers-kafka = { module = "org.testcontainers:kafka" }
kotest-bom = { module = "io.kotest:kotest-bom", version.ref = "kotest" }
kotest-runner-junit5 = { module = "io.kotest:kotest-runner-junit5-jvm" }
kotest-assertions-core = { module = "io.kotest:kotest-assertions-core-jvm" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
mockito-kotlin = { module = "org.mockito.kotlin:mockito-kotlin", version.ref = "mockitoKotlin" } # 추가
assertj-core = { module = "org.assertj:assertj-core", version.ref = "assertj" } # 추가
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" } # 추가

# Ktlint CLI (needed for the plugin itself)
ktlint-cli = { module = "com.pinterest.ktlint:ktlint-cli", version.ref = "ktlintCli" }

[plugins]
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-spring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
kotlin-jpa = { id = "org.jetbrains.kotlin.plugin.jpa", version.ref = "kotlin" }
kotlin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
spring-boot = { id = "org.springframework.boot", version.ref = "springBoot" }
spring-dependency-management = { id = "io.spring.dependency-management", version.ref = "dependencyManagement" }
ktlint = { id = "org.jlleitschuh.gradle.ktlint", version.ref = "ktlintGradle" }
# asciidoctor = { id = "org.asciidoctor.jvm.convert", version.ref = "asciidoctor" } # 사용하지 않으므로 제거 